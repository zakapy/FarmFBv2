import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { toast } from 'react-toastify';
import { fetchAccounts } from '../features/accounts/accountsSlice';
import useFarm from '../hooks/useFarm';
import Button from '../components/Button';
import Loader from '../components/Loader';
import Modal from '../components/Modal';
import './farm.css';

const Farm = () => {
  const dispatch = useDispatch();
  const { list: accounts, loading: accountsLoading } = useSelector(state => state.accounts);
  const { startFarming, getStatus, stopFarming, getHistory, currentStatus, farmHistory, loading: farmLoading } = useFarm();
  
  const [selectedAccount, setSelectedAccount] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [farmSettings, setFarmSettings] = useState({
    name: '',
    groupsToJoin: 5,
    maxActions: 10
  });
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    dispatch(fetchAccounts());
  }, [dispatch]);
  
  // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ñ–∞—Ä–º–∏–Ω–≥–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    getHistory();
  }, [getHistory]);
  
  // –ó–∞–ø—É—Å–∫ —Ñ–∞—Ä–º–∏–Ω–≥–∞
  const handleStartFarm = async () => {
    if (!selectedAccount) {
      toast.error('–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ñ–∞—Ä–º–∏–Ω–≥–∞');
      return;
    }
    
    if (!selectedAccount.dolphin || !selectedAccount.dolphin.profileId) {
      toast.error('–î–ª—è —Ñ–∞—Ä–º–∏–Ω–≥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å Dolphin Anty. –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –≤ Dolphin" –≤ —Ä–∞–∑–¥–µ–ª–µ –ê–∫–∫–∞—É–Ω—Ç—ã.');
      return;
    }
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Ñ–∞—Ä–º–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
      const statusResult = await getStatus(selectedAccount._id || selectedAccount.id);
      
      if (statusResult.payload.status === 'running' || statusResult.payload.status === 'pending') {
        toast.warning(`–§–∞—Ä–º–∏–Ω–≥ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ "${selectedAccount.name}" —É–∂–µ –∑–∞–ø—É—â–µ–Ω`);
        return;
      }
      
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –∑–∞–¥–∞–Ω–æ
      if (!farmSettings.name) {
        setFarmSettings(prev => ({
          ...prev,
          name: `–§–∞—Ä–º ${selectedAccount.name} ${new Date().toLocaleString('ru')}`
        }));
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞—Ä–º–∏–Ω–≥
      const result = await startFarming(selectedAccount._id || selectedAccount.id, farmSettings);
      
      if (result.meta.requestStatus === 'fulfilled') {
        toast.success(`–§–∞—Ä–º–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ "${selectedAccount.name}"`);
        setShowModal(false);
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ñ–∞—Ä–º–∏–Ω–≥–∞
        getHistory();
      } else {
        toast.error(result.payload || '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞');
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞');
    }
  };
  
  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞
  const handleStopFarm = async (farmId) => {
    try {
      const result = await stopFarming(farmId);
      
      if (result.meta.requestStatus === 'fulfilled') {
        toast.success('–§–∞—Ä–º–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ñ–∞—Ä–º–∏–Ω–≥–∞
        getHistory();
      } else {
        toast.error(result.payload || '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞');
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞');
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–∞—Ä–º–∏–Ω–≥–∞
  const handleSettingsChange = (e) => {
    const { name, value } = e.target;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const parsedValue = ['groupsToJoin', 'maxActions'].includes(name) 
      ? parseInt(value) 
      : value;
    
    setFarmSettings(prev => ({
      ...prev,
      [name]: parsedValue
    }));
  };
  
  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞
  const renderFarmStatus = (status) => {
    switch (status) {
      case 'pending':
        return <span className="status-badge pending">–í –æ—á–µ—Ä–µ–¥–∏</span>;
      case 'running':
        return <span className="status-badge running">–ó–∞–ø—É—â–µ–Ω</span>;
      case 'completed':
        return <span className="status-badge completed">–ó–∞–≤–µ—Ä—à–µ–Ω</span>;
      case 'error':
        return <span className="status-badge error">–û—à–∏–±–∫–∞</span>;
      case 'stopped':
        return <span className="status-badge stopped">–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</span>;
      default:
        return <span className="status-badge none">–ù–µ –∑–∞–ø—É—â–µ–Ω</span>;
    }
  };
  
  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  const formatDate = (dateString) => {
    if (!dateString) return '‚Äî';
    return new Date(dateString).toLocaleString('ru');
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞—Ä–º–∏–Ω–≥
  const canStopFarm = (status) => {
    return status === 'pending' || status === 'running';
  };
  
  return (
    <div className="container">
      <div className="farm-header">
        <h1>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞—Ä–º–∏–Ω–≥–æ–º</h1>
        <Button onClick={() => setShowModal(true)}>–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞—Ä–º–∏–Ω–≥</Button>
      </div>
      
      <div className="farm-description">
        <p>
          –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞—Ä–º–∏–Ω–≥ –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Facebook. 
          –§–∞—Ä–º–∏–Ω–≥ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã –∏ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.
        </p>
      </div>
      
      {/* –ò—Å—Ç–æ—Ä–∏—è —Ñ–∞—Ä–º–∏–Ω–≥–∞ */}
      <div className="farm-history">
        <h2>–ò—Å—Ç–æ—Ä–∏—è —Ñ–∞—Ä–º–∏–Ω–≥–∞</h2>
        
        {farmLoading ? (
          <Loader />
        ) : farmHistory && farmHistory.length > 0 ? (
          <div className="farm-history-list">
            <table className="farm-table">
              <thead>
                <tr>
                  <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                  <th>–ê–∫–∫–∞—É–Ω—Ç</th>
                  <th>–°—Ç–∞—Ç—É—Å</th>
                  <th>–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞</th>
                  <th>–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</th>
                  <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
              </thead>
              <tbody>
                {farmHistory.map((item) => (
                  <tr key={item._id || item.id}>
                    <td>{item.name || '–§–∞—Ä–º–∏–Ω–≥ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</td>
                    <td>{item.accountId?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç'}</td>
                    <td>{renderFarmStatus(item.status)}</td>
                    <td>{formatDate(item.createdAt)}</td>
                    <td>{formatDate(item.config?.completedAt)}</td>
                    <td>
                      {canStopFarm(item.status) && (
                        <button
                          className="btn-icon btn-secondary"
                          onClick={() => handleStopFarm(item._id || item.id)}
                          title="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞—Ä–º–∏–Ω–≥"
                        >
                          ‚èπÔ∏è
                        </button>
                      )}
                      <button
                        className="btn-icon btn-primary"
                        onClick={() => toast.info('–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Ñ–∞—Ä–º–∏–Ω–≥–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)')}
                        title="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏"
                      >
                        üîç
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <p>–ò—Å—Ç–æ—Ä–∏—è —Ñ–∞—Ä–º–∏–Ω–≥–∞ –ø—É—Å—Ç–∞</p>
        )}
      </div>
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞ */}
      {showModal && (
        <Modal title="–ó–∞–ø—É—Å–∫ —Ñ–∞—Ä–º–∏–Ω–≥–∞" onClose={() => setShowModal(false)}>
          <div className="farm-form">
            <div className="form-group">
              <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞—Ä–º–∏–Ω–≥–∞:</label>
              <input
                type="text"
                name="name"
                value={farmSettings.name}
                onChange={handleSettingsChange}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –§–∞—Ä–º –≥—Ä—É–ø–ø –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"
                className="input"
              />
            </div>
            
            <div className="form-group">
              <label>–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç:</label>
              {accountsLoading ? (
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...</p>
              ) : accounts && accounts.length > 0 ? (
                <select
                  value={selectedAccount ? (selectedAccount._id || selectedAccount.id) : ''}
                  onChange={(e) => {
                    const account = accounts.find(a => (a._id || a.id) === e.target.value);
                    setSelectedAccount(account);
                  }}
                  className="input"
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç</option>
                  {accounts.map((account) => (
                    <option 
                      key={account._id || account.id} 
                      value={account._id || account.id}
                      disabled={!account.dolphin || !account.dolphin.profileId}
                    >
                      {account.name} {(!account.dolphin || !account.dolphin.profileId) ? '(–Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è Dolphin)' : ''}
                    </option>
                  ))}
                </select>
              ) : (
                <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</p>
              )}
              {selectedAccount && (!selectedAccount.dolphin || !selectedAccount.dolphin.profileId) && (
                <p className="warning">
                  ‚ö†Ô∏è –î–ª—è —Ñ–∞—Ä–º–∏–Ω–≥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å Dolphin Anty.
                </p>
              )}
            </div>
            
            <div className="form-group">
              <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:</label>
              <input
                type="number"
                name="groupsToJoin"
                value={farmSettings.groupsToJoin}
                onChange={handleSettingsChange}
                min="1"
                max="10"
                className="input"
              />
              <small>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 5 –≥—Ä—É–ø–ø –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—É—Å–∫</small>
            </div>
            
            <div className="form-group">
              <label>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π:</label>
              <input
                type="number"
                name="maxActions"
                value={farmSettings.maxActions}
                onChange={handleSettingsChange}
                min="1"
                max="20"
                className="input"
              />
              <small>–õ–∏–º–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞</small>
            </div>
            
            <div className="form-actions">
              <Button variant="secondary" onClick={() => setShowModal(false)}>–û—Ç–º–µ–Ω–∞</Button>
              <Button onClick={handleStartFarm} disabled={!selectedAccount || farmLoading}>
                {farmLoading ? '–ó–∞–ø—É—Å–∫...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞—Ä–º–∏–Ω–≥'}
              </Button>
            </div>
          </div>
        </Modal>
      )}
    </div>
  );
};

export default Farm;