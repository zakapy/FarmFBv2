import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Link } from 'react-router-dom';
import { toast } from 'react-toastify';
import './Accounts.css';

import {
  fetchAccounts,
  addAccount,
  editAccount,
  removeAccount,
} from '../features/accounts/accountsSlice';

import Button from '../components/Button';
import AccountCard from '../components/AccountCard';
import AccountForm from '../components/AccountForm';
import ConfirmModal from '../components/ConfirmModal';
import Loader from '../components/Loader';

const Accounts = () => {
  const dispatch = useDispatch();
  const { list = [], loading } = useSelector((state) => state.accounts); // –∑–∞—â–∏—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

  const [showForm, setShowForm] = useState(false);
  const [editData, setEditData] = useState(null);
  const [deleteId, setDeleteId] = useState(null);
  const [searchQuery, setSearchQuery] = useState(''); // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞

  useEffect(() => {
    dispatch(fetchAccounts());
  }, [dispatch]);

  // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è showForm
  useEffect(() => {
    console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ showForm –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:', showForm);
  }, [showForm]);

  const handleAdd = () => {
    try {
      console.log('–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞–∂–∞—Ç–∞');
      setEditData(null);
      setShowForm(true);
      console.log('ShowForm —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤:', true);
      // –î–æ–±–∞–≤–∏–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setTimeout(() => {
        if (!document.querySelector('.modal-backdrop')) {
          console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
          setShowForm(prev => {
            console.log('–û–±–Ω–æ–≤–ª—è–µ–º showForm –∏–∑', prev, '–≤ true');
            return true;
          });
        }
      }, 100);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É: ' + error.message);
    }
  };

  const handleEdit = (account) => {
    try {
      console.log('–ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞–∂–∞—Ç–∞', account);
      const safeAccount = {
        ...account,
        proxy: account.proxy || { name: '' },
      };
      setEditData(safeAccount);
      setShowForm(true);
      console.log('ShowForm —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤:', true);
      // –î–æ–±–∞–≤–∏–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setTimeout(() => {
        if (!document.querySelector('.modal-backdrop')) {
          console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
          setShowForm(prev => {
            console.log('–û–±–Ω–æ–≤–ª—è–µ–º showForm –∏–∑', prev, '–≤ true');
            return true;
          });
        }
      }, 100);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ' + error.message);
    }
  };

  const handleDelete = (id) => {
    console.log('–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å ID:', id);
    setDeleteId(id);
    console.log('DeleteId —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤:', id);
  };

  const confirmDelete = async () => {
    try {
      console.log('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å ID:', deleteId);
      
      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
      await dispatch(removeAccount(deleteId)).unwrap();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
      toast.success('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
      
      // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
      console.log('–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è');
      await dispatch(fetchAccounts()).unwrap();
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      setDeleteId(null);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
      toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const handleSearchChange = (e) => {
    setSearchQuery(e.target.value);
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const filteredAccounts = list.filter((acc) => 
    acc.name?.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const submitForm = async (data) => {
    try {
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', data);
      
      if (editData) {
        console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞:', editData._id || editData.id);
        // –°–Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
        await dispatch(editAccount({ 
          id: editData._id || editData.id, 
          data 
        })).unwrap();
        
        // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        await dispatch(fetchAccounts()).unwrap();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        toast.success('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
      } else {
        console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞');
        // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
        await dispatch(addAccount(data)).unwrap();
        
        // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
        await dispatch(fetchAccounts()).unwrap();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        toast.success('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
      }
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      setShowForm(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã:', error);
      toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  };

  return (
    <div className="accounts-container">
      <div className="accounts-header">
        <h1>–ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã</h1>
        <div className="actions-container">
          {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ */}
          <div style={{ position: 'relative' }}>
            <span style={{ 
              position: 'absolute', 
              left: '10px', 
              top: '50%', 
              transform: 'translateY(-50%)',
              color: '#888'
            }}>
              üîç
            </span>
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é..."
              value={searchQuery}
              onChange={handleSearchChange}
              style={{
                padding: '8px 10px 8px 35px',
                borderRadius: '6px',
                border: '1px solid #ddd',
                fontSize: '14px',
                minWidth: '200px',
                outline: 'none'
              }}
            />
          </div>
          <Link 
            to="/create-facebook" 
            style={{
              textDecoration: 'none',
              padding: '8px 14px',
              borderRadius: '6px',
              backgroundColor: '#1877f2',
              color: 'white',
              fontSize: '14px',
              marginRight: '10px',
              display: 'flex',
              alignItems: 'center',
              gap: '5px'
            }}
          >
            <span>üöÄ</span> –°–æ–∑–¥–∞—Ç—å FB –∞–∫–∫–∞—É–Ω—Ç
          </Link>
          <button 
            className="add-account-button"
            onClick={handleAdd}
          >
            <span>‚ûï</span> –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
          </button>
        </div>
      </div>

      {loading ? (
        <Loader />
      ) : filteredAccounts.length === 0 ? (
        <p>
          {list.length === 0 
            ? "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤" 
            : `–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö "${searchQuery}"`
          }
        </p>
      ) : (
        <div style={{ display: 'grid', gap: '1rem', marginTop: '1rem' }}>
          {filteredAccounts.map((acc) => (
            <AccountCard
              key={acc._id || acc.id} // –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º—Å—è –ø–æ–¥ Mongo _id
              account={{
                ...acc,
                name: acc.name ?? '‚Äî',
                token: acc.token ?? '',
                platform: acc.platform ?? '',
                meta: acc.meta ?? {},
              }}
              onEdit={() => handleEdit(acc)}
              onDelete={() => handleDelete(acc._id || acc.id)}
              refreshAccounts={() => dispatch(fetchAccounts())}
            />
          ))}
        </div>
      )}

      {showForm && (
        <div style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, zIndex: 9998 }}>
          <AccountForm
            onClose={() => {
              console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã');
              setShowForm(false);
              // –£—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è editData
              setTimeout(() => {
                setEditData(null);
                console.log('EditData —Å–±—Ä–æ—à–µ–Ω');
              }, 100);
            }}
            onSubmit={(data) => {
              console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏:', data);
              submitForm(data);
            }}
            initialData={editData}
          />
        </div>
      )}

      {deleteId && (
        <div style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, zIndex: 9998 }}>
          <ConfirmModal
            title="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?"
            onClose={() => setDeleteId(null)}
            onConfirm={confirmDelete}
          >
            –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
          </ConfirmModal>
        </div>
      )}
    </div>
  );
};

export default Accounts; 