import React, { useEffect, useState, useCallback } from 'react';
import { useDispatch } from 'react-redux';
import Modal from '../components/Modal';
import Button from '../components/Button';
import useFarm from '../hooks/useFarm';
import Loader from '../components/Loader';
import './FarmDetailsModal.css';

const FarmDetailsModal = ({ farmId, onClose }) => {
  const { getDetails, farmDetails, loading } = useFarm();
  const [activeTab, setActiveTab] = useState('overview');
  const [isInitialFetchDone, setIsInitialFetchDone] = useState(false);
  
  // Use useCallback to prevent recreation of this function on each render
  const fetchDetails = useCallback(() => {
    if (farmId && !isInitialFetchDone) {
      getDetails(farmId);
      setIsInitialFetchDone(true);
    }
  }, [farmId, getDetails, isInitialFetchDone]);
  
  // Load details only once when component mounts
  useEffect(() => {
    fetchDetails();
  }, [fetchDetails]);
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (dateString) => {
    if (!dateString) return '‚Äî';
    return new Date(dateString).toLocaleString('ru');
  };
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const formatDuration = (seconds) => {
    if (!seconds) return '‚Äî';
    
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    
    if (minutes === 0) {
      return `${remainingSeconds} —Å–µ–∫.`;
    }
    
    return `${minutes} –º–∏–Ω. ${remainingSeconds} —Å–µ–∫.`;
  };
  
  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ–∞—Ä–º–∏–Ω–≥–∞
  const renderResults = () => {
    if (!farmDetails || !farmDetails.results) {
      return <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö</p>;
    }
    
    const { results } = farmDetails;
    
    return (
      <div className="farm-results">
        <div className="result-item">
          <div className="result-label">–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã:</div>
          <div className="result-value">{results.groupsJoined || 0}</div>
        </div>
        
        {results.postsLiked !== undefined && (
          <div className="result-item">
            <div className="result-label">–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ª–∞–π–∫–æ–≤:</div>
            <div className="result-value">{results.postsLiked || 0}</div>
          </div>
        )}
        
        {results.friendsAdded !== undefined && (
          <div className="result-item">
            <div className="result-label">–î–æ–±–∞–≤–ª–µ–Ω–æ –¥—Ä—É–∑–µ–π:</div>
            <div className="result-value">{results.friendsAdded || 0}</div>
          </div>
        )}
        
        {results.contentViewed !== undefined && (
          <div className="result-item">
            <div className="result-label">–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –ø–æ—Å—Ç–æ–≤:</div>
            <div className="result-value">{results.contentViewed || 0}</div>
          </div>
        )}
        
        <div className="result-item">
          <div className="result-label">–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π:</div>
          <div className="result-value">
            {(results.groupsJoined || 0) + 
             (results.postsLiked || 0) + 
             (results.friendsAdded || 0) + 
             (results.contentViewed || 0)}
          </div>
        </div>
      </div>
    );
  };
  
  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫ —Ñ–∞—Ä–º–∏–Ω–≥–∞
  const renderErrors = () => {
    if (!farmDetails || !farmDetails.results || !farmDetails.results.errors || farmDetails.results.errors.length === 0) {
      return <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—à–∏–±–∫–∞—Ö</p>;
    }
    
    const { errors } = farmDetails.results;
    
    return (
      <div className="farm-errors">
        <h4>–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫:</h4>
        <ul className="error-list">
          {errors.map((error, index) => (
            <li key={index} className="error-item">
              <div className="error-stage">–≠—Ç–∞–ø: <strong>{error.stage || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</strong></div>
              <div className="error-message">{error.message}</div>
              <div className="error-time">{formatDate(error.timestamp)}</div>
            </li>
          ))}
        </ul>
      </div>
    );
  };
  
  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ñ—É–Ω–∫—Ü–∏–π —Ñ–∞—Ä–º–∏–Ω–≥–∞
  const renderFunctions = () => {
    if (!farmDetails || !farmDetails.config || !farmDetails.config.functions) {
      return <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö —Ñ–∞—Ä–º–∏–Ω–≥–∞</p>;
    }
    
    const { functions } = farmDetails.config;
    
    return (
      <div className="farm-functions-detail">
        {functions.joinGroups?.enabled && (
          <div className="function-detail-item">
            <div className="function-icon">üë•</div>
            <div className="function-info">
              <h4>–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã</h4>
              <div className="function-param">
                –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <strong>{functions.joinGroups.count || 0}</strong>
              </div>
            </div>
          </div>
        )}
        
        {functions.likeContent?.enabled && (
          <div className="function-detail-item">
            <div className="function-icon">üëç</div>
            <div className="function-info">
              <h4>–õ–∞–π–∫–∏ –ø–æ—Å—Ç–æ–≤</h4>
              <div className="function-param">
                –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <strong>{functions.likeContent.count || 0}</strong>
              </div>
            </div>
          </div>
        )}
        
        {functions.addFriends?.enabled && (
          <div className="function-detail-item">
            <div className="function-icon">ü§ù</div>
            <div className="function-info">
              <h4>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π</h4>
              <div className="function-param">
                –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <strong>{functions.addFriends.count || 0}</strong>
              </div>
            </div>
          </div>
        )}
        
        {functions.viewContent?.enabled && (
          <div className="function-detail-item">
            <div className="function-icon">üëÅÔ∏è</div>
            <div className="function-info">
              <h4>–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h4>
              <div className="function-param">
                –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <strong>{functions.viewContent.count || 0}</strong>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  };
  
  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
  const renderScreenshots = () => {
    if (!farmDetails || !farmDetails.results || !farmDetails.results.screenshots || farmDetails.results.screenshots.length === 0) {
      return <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤</p>;
    }
    
    const { screenshots } = farmDetails.results;
    
    return (
      <div className="screenshots-gallery">
        {screenshots.map((screenshot, index) => {
          // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø—É—Ç–∏
          const fileName = screenshot.split('/').pop();
          return (
            <div className="screenshot-item" key={index}>
              <div className="screenshot-number">#{index + 1}</div>
              <a href={`/screenshots/${fileName}`} target="_blank" rel="noopener noreferrer">
                <img 
                  src={`/screenshots/${fileName}`} 
                  alt={`–°–∫—Ä–∏–Ω—à–æ—Ç #${index + 1}`} 
                  className="screenshot-thumb"
                />
              </a>
              <div className="screenshot-name">{fileName}</div>
            </div>
          );
        })}
      </div>
    );
  };
  
  // –†–µ–Ω–¥–µ—Ä–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  const renderActiveTabContent = () => {
    switch (activeTab) {
      case 'overview':
        return (
          <div className="tab-content">
            <h3>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <div className="overview-grid">
              <div className="overview-item">
                <div className="overview-label">–ê–∫–∫–∞—É–Ω—Ç:</div>
                <div className="overview-value">{farmDetails?.accountId?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</div>
              </div>
              <div className="overview-item">
                <div className="overview-label">–°—Ç–∞—Ç—É—Å:</div>
                <div className="overview-value">
                  <span className={`status-badge ${farmDetails?.status || 'none'}`}>
                    {farmDetails?.status === 'pending' && '–í –æ—á–µ—Ä–µ–¥–∏'}
                    {farmDetails?.status === 'running' && '–ó–∞–ø—É—â–µ–Ω'}
                    {farmDetails?.status === 'completed' && '–ó–∞–≤–µ—Ä—à–µ–Ω'}
                    {farmDetails?.status === 'error' && '–û—à–∏–±–∫–∞'}
                    {farmDetails?.status === 'stopped' && '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
                    {!farmDetails?.status && '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                  </span>
                </div>
              </div>
              <div className="overview-item">
                <div className="overview-label">–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞:</div>
                <div className="overview-value">{formatDate(farmDetails?.startedAt || farmDetails?.createdAt)}</div>
              </div>
              <div className="overview-item">
                <div className="overview-label">–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:</div>
                <div className="overview-value">{formatDate(farmDetails?.completedAt || farmDetails?.config?.completedAt)}</div>
              </div>
              <div className="overview-item">
                <div className="overview-label">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</div>
                <div className="overview-value">
                  {farmDetails?.config?.duration ? formatDuration(farmDetails.config.duration) : '‚Äî'}
                </div>
              </div>
              <div className="overview-item">
                <div className="overview-label">ID —Ñ–∞—Ä–º–∏–Ω–≥–∞:</div>
                <div className="overview-value">
                  <code>{farmDetails?.id || farmDetails?._id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</code>
                </div>
              </div>
            </div>
            
            <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</h3>
            {renderResults()}
          </div>
        );
      case 'functions':
        return (
          <div className="tab-content">
            <h3>–§—É–Ω–∫—Ü–∏–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞</h3>
            {renderFunctions()}
          </div>
        );
      case 'errors':
        return (
          <div className="tab-content">
            <h3>–û—à–∏–±–∫–∏</h3>
            {renderErrors()}
          </div>
        );
      case 'screenshots':
        return (
          <div className="tab-content">
            <h3>–°–∫—Ä–∏–Ω—à–æ—Ç—ã</h3>
            {renderScreenshots()}
          </div>
        );
      default:
        return <p>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É</p>;
    }
  };
  
  // Function to handle modal close and cleanup
  const handleClose = () => {
    // Reset states
    setIsInitialFetchDone(false);
    
    // Call the parent's onClose
    onClose();
  };
  
  return (
    <Modal title={`–î–µ—Ç–∞–ª–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${farmDetails?.name || '–ó–∞–≥—Ä—É–∑–∫–∞...'}`} onClose={handleClose}>
      <div className="farm-details-container">
        {loading && !farmDetails ? (
          <div className="details-loader">
            <Loader />
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
          </div>
        ) : !farmDetails ? (
          <div className="details-error">
            <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞—Ä–º–∏–Ω–≥–µ</p>
            <Button onClick={handleClose}>–ó–∞–∫—Ä—ã—Ç—å</Button>
          </div>
        ) : (
          <>
            <div className="details-tabs">
              <button 
                className={`tab-button ${activeTab === 'overview' ? 'active' : ''}`}
                onClick={() => setActiveTab('overview')}
              >
                –û–±–∑–æ—Ä
              </button>
              <button 
                className={`tab-button ${activeTab === 'functions' ? 'active' : ''}`}
                onClick={() => setActiveTab('functions')}
              >
                –§—É–Ω–∫—Ü–∏–∏
              </button>
              <button 
                className={`tab-button ${activeTab === 'errors' ? 'active' : ''}`}
                onClick={() => setActiveTab('errors')}
              >
                –û—à–∏–±–∫–∏
              </button>
              <button 
                className={`tab-button ${activeTab === 'screenshots' ? 'active' : ''}`}
                onClick={() => setActiveTab('screenshots')}
              >
                –°–∫—Ä–∏–Ω—à–æ—Ç—ã
              </button>
            </div>
            
            <div className="details-content">
              {renderActiveTabContent()}
            </div>
            
            <div className="details-actions">
              <Button variant="secondary" onClick={handleClose}>–ó–∞–∫—Ä—ã—Ç—å</Button>
            </div>
          </>
        )}
      </div>
    </Modal>
  );
};

export default FarmDetailsModal;