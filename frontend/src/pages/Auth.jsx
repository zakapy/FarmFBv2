import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import Input from '../components/Input';
import Button from '../components/Button';
import Loader from '../components/Loader';
import { loginUser, registerUser, fetchUserProfile } from '../features/auth/authSlice';
import { toast } from 'react-toastify';
import { useNavigate, useLocation } from 'react-router-dom';
import validator from 'validator';

const Auth = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const location = useLocation();
  const { loading, isAuthenticated } = useSelector((state) => state.auth);

  const [form, setForm] = useState({ email: '', password: '', confirm: '' });
  const [mode, setMode] = useState('login'); // login | register | forgot

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validator.isEmail(form.email)) {
      toast.error('–ù–µ–≤–µ—Ä–Ω—ã–π email');
      return;
    }

    if (mode === 'login') {
      const res = await dispatch(loginUser(form));
      if (loginUser.fulfilled.match(res)) {
        await dispatch(fetchUserProfile());
        toast.success('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!');
        // —Ä–µ–¥–∏—Ä–µ–∫—Ç –±—É–¥–µ—Ç –≤ useEffect
      } else {
        toast.error(res.payload || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
      }
    }

    if (mode === 'register') {
      if (form.password !== form.confirm) {
        toast.error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
        return;
      }

      const res = await dispatch(registerUser(form));
      if (registerUser.fulfilled.match(res)) {
        toast.success('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
        setMode('login');
      } else {
        toast.error(res.payload || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      }
    }

    if (mode === 'forgot') {
      toast.info('–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–±—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)');
      setMode('login');
    }
  };

  // üß† –†–µ–¥–∏—Ä–µ–∫—Ç –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ /dashboard
  useEffect(() => {
    if (isAuthenticated) {
      const redirectTo = location.state?.from?.pathname || '/dashboard';
      navigate(redirectTo, { replace: true });
    }
  }, [isAuthenticated, navigate, location]);

  return (
    <div className="auth-wrapper">
      <div className="auth-card">
        <h2>
          {{
            login: '–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç',
            register: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
            forgot: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å',
          }[mode]}
        </h2>

        <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>
          <Input name="email" placeholder="Email" value={form.email} onChange={handleChange} type="email" />

          {(mode === 'login' || mode === 'register') && (
            <Input name="password" placeholder="–ü–∞—Ä–æ–ª—å" value={form.password} onChange={handleChange} type="password" />
          )}

          {mode === 'register' && (
            <Input
              name="confirm"
              placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
              value={form.confirm}
              onChange={handleChange}
              type="password"
            />
          )}

          <Button type="submit" disabled={loading}>
            {loading ? <Loader /> : {
              login: '–í–æ–π—Ç–∏',
              register: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è',
              forgot: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
            }[mode]}
          </Button>
        </form>

        <div style={{ marginTop: '1rem', fontSize: '0.9rem' }}>
          {mode === 'login' && (
            <>
              –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?{' '}
              <button onClick={() => setMode('register')} style={{ color: 'var(--primary)' }}>
                –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
              </button>
              <br />
              –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?{' '}
              <button onClick={() => setMode('forgot')} style={{ color: 'var(--primary)' }}>
                –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
              </button>
            </>
          )}
          {mode === 'register' && (
            <>
              –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{' '}
              <button onClick={() => setMode('login')} style={{ color: 'var(--primary)' }}>
                –í–æ–π—Ç–∏
              </button>
            </>
          )}
          {mode === 'forgot' && (
            <>
              –í—Å–ø–æ–º–Ω–∏–ª–∏?{' '}
              <button onClick={() => setMode('login')} style={{ color: 'var(--primary)' }}>
                –í–æ–π—Ç–∏
              </button>
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default Auth;
