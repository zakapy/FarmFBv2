import React, { useState, useEffect } from 'react';
import './ProxyList.css';
import API from '../api/axios';
import { toast } from 'react-toastify';
import Button from './Button';
import ProxyForm from './ProxyForm';

const ProxyList = () => {
  const [proxies, setProxies] = useState([]);
  const [filteredProxies, setFilteredProxies] = useState([]);
  const [loading, setLoading] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [showAddForm, setShowAddForm] = useState(false);
  const [editingProxy, setEditingProxy] = useState(null);
  const [checkingStatus, setCheckingStatus] = useState({});

  useEffect(() => {
    loadProxies();
  }, []);

  // eslint-disable-next-line react-hooks/exhaustive-deps
  useEffect(() => {
    filterProxies();
  }, [proxies, searchQuery]);

  const loadProxies = async () => {
    setLoading(true);
    try {
      const response = await API.get('/api/v1/proxies');
      setProxies(response.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏');
    } finally {
      setLoading(false);
    }
  };

  const filterProxies = () => {
    if (!searchQuery.trim()) {
      setFilteredProxies(proxies);
      return;
    }

    const query = searchQuery.toLowerCase();
    const filtered = proxies.filter(proxy => 
      (proxy.name && proxy.name.toLowerCase().includes(query)) || 
      proxy.host.toLowerCase().includes(query) ||
      `${proxy.host}:${proxy.port}`.toLowerCase().includes(query)
    );
    
    setFilteredProxies(filtered);
  };

  const handleDelete = async (proxyId) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–∫—Å–∏?')) {
      try {
        await API.delete(`/api/v1/proxies/${proxyId}`);
        toast.success('–ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
        loadProxies();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏:', error);
        toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏');
      }
    }
  };

  const handleCheck = async (proxyId) => {
    setCheckingStatus(prev => ({ ...prev, [proxyId]: 'checking' }));
    try {
      const response = await API.post(`/api/v1/proxies/${proxyId}/check`);
      toast.success(response.data.message || '–ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      setCheckingStatus(prev => ({ ...prev, [proxyId]: 'success' }));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏ –≤ –º–∞—Å—Å–∏–≤–µ
      const updatedProxies = proxies.map(p => {
        if (p._id === proxyId) {
          return { ...p, active: true, lastChecked: new Date().toISOString() };
        }
        return p;
      });
      setProxies(updatedProxies);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setCheckingStatus(prev => {
          const newStatus = { ...prev };
          delete newStatus[proxyId];
          return newStatus;
        });
      }, 3000);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–∫—Å–∏:', error);
      toast.error('–ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      setCheckingStatus(prev => ({ ...prev, [proxyId]: 'error' }));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏ –≤ –º–∞—Å—Å–∏–≤–µ
      const updatedProxies = proxies.map(p => {
        if (p._id === proxyId) {
          return { ...p, active: false, lastChecked: new Date().toISOString() };
        }
        return p;
      });
      setProxies(updatedProxies);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setCheckingStatus(prev => {
          const newStatus = { ...prev };
          delete newStatus[proxyId];
          return newStatus;
        });
      }, 3000);
    }
  };

  const handleEdit = (proxy) => {
    setEditingProxy(proxy);
  };

  const handleFormSuccess = () => {
    loadProxies();
    setShowAddForm(false);
    setEditingProxy(null);
  };

  const formatProxyString = (proxy) => {
    const basic = `${proxy.host}:${proxy.port}`;
    if (proxy.username && proxy.password) {
      return `${basic}:${proxy.username}:${proxy.password}`;
    }
    return basic;
  };

  const getCheckButtonText = (proxyId) => {
    const status = checkingStatus[proxyId];
    if (status === 'checking') return '–ü—Ä–æ–≤–µ—Ä–∫–∞...';
    if (status === 'success') return '‚úì –†–∞–±–æ—Ç–∞–µ—Ç';
    if (status === 'error') return '‚úó –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç';
    return '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å';
  };

  const getCheckButtonClass = (proxyId) => {
    const status = checkingStatus[proxyId];
    if (status === 'success') return 'success';
    if (status === 'error') return 'danger';
    return '';
  };

  const renderStatus = (proxy) => {
    // –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ —Å–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (checkingStatus[proxy._id] === 'checking') {
      return <span className="proxy-status-checking">‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞...</span>;
    }
    
    // –ï—Å–ª–∏ active –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–∫—Å–∏ –µ—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª—Å—è
    if (proxy.active === undefined) {
      return <span className="proxy-status-unknown">‚ö™ –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω</span>;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    return proxy.active ? 
      <span className="proxy-status-active">üü¢ –ê–∫—Ç–∏–≤–µ–Ω</span> : 
      <span className="proxy-status-inactive">üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω</span>;
  };

  const formatLastChecked = (dateString) => {
    if (!dateString) return '–ù–∏–∫–æ–≥–¥–∞';
    
    const date = new Date(dateString);
    return new Intl.DateTimeFormat('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(date);
  };

  return (
    <div className="proxy-list-container">
      <div className="proxy-list-header">
        <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏</h2>
        <div className="header-actions">
          <div className="search-container">
            <span className="search-icon">üîç</span>
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø—Ä–æ–∫—Å–∏..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="search-input"
            />
          </div>
          <Button onClick={() => setShowAddForm(true)}>–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏</Button>
        </div>
      </div>

      {loading ? (
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏...</p>
        </div>
      ) : filteredProxies.length > 0 ? (
        <div className="proxy-grid">
          {filteredProxies.map(proxy => (
            <div key={proxy._id} className="proxy-card">
              <div className="proxy-card-header">
                <h3>{proxy.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
                <span className={`proxy-type ${proxy.type}`}>{proxy.type.toUpperCase()}</span>
              </div>
              <div className="proxy-details">
                <p className="proxy-address">
                  <strong>–ê–¥—Ä–µ—Å:</strong> {formatProxyString(proxy)}
                </p>
                {proxy.username && (
                  <p className="proxy-auth">
                    <strong>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:</strong> {proxy.username}:***
                  </p>
                )}
                <p className="proxy-status-row">
                  <strong>–°—Ç–∞—Ç—É—Å:</strong> {renderStatus(proxy)}
                </p>
                {proxy.lastChecked && (
                  <p className="proxy-last-checked">
                    <strong>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</strong> {formatLastChecked(proxy.lastChecked)}
                  </p>
                )}
              </div>
              <div className="proxy-actions">
                <Button 
                  onClick={() => handleCheck(proxy._id)} 
                  className={getCheckButtonClass(proxy._id)}
                  disabled={checkingStatus[proxy._id] === 'checking'}
                >
                  {getCheckButtonText(proxy._id)}
                </Button>
                <Button onClick={() => handleEdit(proxy)} className="secondary">
                  ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å
                </Button>
                <Button onClick={() => handleDelete(proxy._id)} className="danger">
                  üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </Button>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="no-proxies">
          {searchQuery ? (
            <div className="not-found">
              <div className="empty-icon">üîç</div>
              <p>–ü–æ –∑–∞–ø—Ä–æ—Å—É "{searchQuery}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
              <Button onClick={() => setSearchQuery('')} className="secondary">–°–±—Ä–æ—Å–∏—Ç—å –ø–æ–∏—Å–∫</Button>
            </div>
          ) : (
            <div className="empty-state">
              <p>–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ–∫—Å–∏. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.</p>
              <Button onClick={() => setShowAddForm(true)}>–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –ø—Ä–æ–∫—Å–∏</Button>
            </div>
          )}
        </div>
      )}

      {showAddForm && (
        <ProxyForm
          onClose={() => setShowAddForm(false)}
          onSuccess={handleFormSuccess}
        />
      )}

      {editingProxy && (
        <ProxyForm
          initialData={editingProxy}
          onClose={() => setEditingProxy(null)}
          onSuccess={handleFormSuccess}
        />
      )}
    </div>
  );
};

export default ProxyList;
