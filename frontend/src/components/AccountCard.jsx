import React, { useState } from 'react';
import './AccountCard.css';
import './Button.css';
import './Spinner.css';
import API from '../api/axios';
import { toast } from 'react-toastify';

const AccountCard = ({ account, onEdit, onDelete }) => {
  const [status, setStatus] = useState(account.status || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
  const [checkState, setCheckState] = useState('idle'); // idle | loading | success | error
  const [syncState, setSyncState] = useState('idle'); // idle | loading | success | error

  const cookiesOk = Array.isArray(account.cookies) && account.cookies.length > 0;
  const proxy = typeof account.proxy === 'string' ? account.proxy : (account.proxy?.name || '');
  const hasDolphinProfile = account.dolphin && account.dolphin.profileId;

  const renderStatus = () => {
    switch (status?.toLowerCase()) {
      case '–∞–∫—Ç–∏–≤–µ–Ω':
      case 'active':
        return <span style={{ color: 'green' }}>üü¢ –ê–∫—Ç–∏–≤–µ–Ω</span>;
      case '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω':
      case 'inactive':
        return <span style={{ color: 'red' }}>üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω</span>;
      default:
        return <span style={{ color: 'gray' }}>‚ö™ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</span>;
    }
  };

  const handleCheckStatus = async () => {
    setCheckState('loading');
    try {
      const res = await API.post(`/api/v1/accounts/${account._id || account.id}/check`);
      
      // ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const newStatus = res.data?.status?.toLowerCase();
  
      // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–µ–π—Ç
      if (newStatus === '–∞–∫—Ç–∏–≤–µ–Ω' || newStatus === '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω') {
        setStatus(newStatus);
      }
  
      setCheckState('success');
      setTimeout(() => setCheckState('idle'), 2000);
    } catch (err) {
      console.error(err);
      setCheckState('error');
      setTimeout(() => setCheckState('idle'), 2000);
    }
  };

  const handleSyncDolphin = async () => {
    setSyncState('loading');
    try {
      const res = await API.post(`/api/v1/accounts/${account._id || account.id}/sync-dolphin`);
      
      toast.success(res.data.message || '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ Dolphin Anty');
      setSyncState('success');
      setTimeout(() => setSyncState('idle'), 2000);
    } catch (err) {
      console.error(err);
      toast.error(err.response?.data?.error || '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Dolphin Anty');
      setSyncState('error');
      setTimeout(() => setSyncState('idle'), 2000);
    }
  };

  const renderDolphinInfo = () => {
    if (hasDolphinProfile) {
      return (
        <p><strong>Dolphin ID:</strong> <span style={{ color: 'blue' }}>üê¨ #{account.dolphin.profileId}</span></p>
      );
    }
    return null;
  };

  const renderCheckButton = () => {
    switch (checkState) {
      case 'loading':
        return (
          <button className="btn default" disabled>
            <span className="spinner small"></span>
            <span>–ü—Ä–æ–≤–µ—Ä–∫–∞...</span>
          </button>
        );
      case 'success':
        return (
          <button className="btn success" disabled>
            ‚úÖ –ì–æ—Ç–æ–≤–æ!
          </button>
        );
      case 'error':
        return (
          <button className="btn error" disabled>
            ‚ùå –û—à–∏–±–∫–∞
          </button>
        );
      default:
        return (
          <button className="btn default" onClick={handleCheckStatus}>
            üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
          </button>
        );
    }
  };

  const renderDolphinButton = () => {
    if (hasDolphinProfile) {
      return null; // –£–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω
    }

    switch (syncState) {
      case 'loading':
        return (
          <button className="btn default" disabled>
            <span className="spinner small"></span>
            <span>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...</span>
          </button>
        );
      case 'success':
        return (
          <button className="btn success" disabled>
            ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω
          </button>
        );
      case 'error':
        return (
          <button className="btn error" disabled>
            ‚ùå –û—à–∏–±–∫–∞
          </button>
        );
      default:
        return (
          <button className="btn secondary" onClick={handleSyncDolphin}>
            üê¨ –°–æ–∑–¥–∞—Ç—å –≤ Dolphin
          </button>
        );
    }
  };

  return (
    <div className="account-card">
      <div>
        <h3>{account.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
        <p><strong>–ö—É–∫–∏:</strong> {cookiesOk ? <span style={{ color: 'green' }}>‚úÖ –ï—Å—Ç—å</span> : <span style={{ color: 'red' }}>‚ùå –ù–µ—Ç</span>}</p>
        <p><strong>–ü—Ä–æ–∫—Å–∏:</strong> {proxy ? <span>üåê {proxy}</span> : <span style={{ color: 'gray' }}>‚Äî –ù–µ—Ç</span>}</p>
        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {renderStatus()}</p>
        {renderDolphinInfo()}
      </div>

      <div className="actions">
        <button
          className="btn-icon btn-secondary"
          onClick={onEdit}
          title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
        >
          ‚úèÔ∏è
        </button>
        <button
          className="btn-icon btn-primary"
          onClick={onDelete}
          title="–£–¥–∞–ª–∏—Ç—å"
        >
          üóëÔ∏è
        </button>
        <div className="action-buttons">
          {renderCheckButton()}
          {renderDolphinButton()}
        </div>
      </div>
    </div>
  );
};

export default AccountCard;