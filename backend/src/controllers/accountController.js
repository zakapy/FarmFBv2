const accountService = require('../services/accountService');
const { checkFacebookCookies } = require('../utils/facebook');
const env = require('../config/env');
const dolphinService = require('../services/dolphinService');

exports.list = async (req, res) => {
  const data = await accountService.list(req.user.id);
  res.json(data);
};

exports.create = async (req, res) => {
  try {
    let { cookies, proxyType, ...rest } = req.body;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ cookies
    if (typeof cookies === 'string') {
      try {
        cookies = JSON.parse(cookies);
      } catch (e) {
        return res.status(400).json({
          error: 'Validation failed',
          details: [{
            field: 'body.cookies',
            message: 'Expected valid JSON string for cookies'
          }]
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø—Ä–æ–∫—Å–∏
    if (proxyType && !['http', 'socks5'].includes(proxyType)) {
      return res.status(400).json({
        error: 'Validation failed',
        details: [{
          field: 'body.proxyType',
          message: 'Proxy type must be "http" or "socks5"'
        }]
      });
    }

    // –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
    const accountData = {
      ...rest,
      cookies,
      proxyType: proxyType || 'http', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é http, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
      status: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    };

    const newAccount = await accountService.create(req.user.id, accountData);
    res.status(201).json(newAccount);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
    res.status(400).json({ 
      error: 'Validation failed',
      details: [{
        field: 'body.cookies',
        message: error.message
      }]
    });
  }
};

exports.update = async (req, res) => {
  try {
    const { cookies, proxyType } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø—Ä–æ–∫—Å–∏
    if (proxyType && !['http', 'socks5'].includes(proxyType)) {
      return res.status(400).json({
        error: 'Validation failed',
        details: [{
          field: 'body.proxyType',
          message: 'Proxy type must be "http" or "socks5"'
        }]
      });
    }
    
    if (cookies) {
      const isValid = await checkFacebookCookies(cookies);
      if (!isValid) {
        return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫—É–∫–∏ –∏–ª–∏ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Facebook' });
      }
    }

    const updated = await accountService.update(req.user.id, req.params.id, req.body);
    res.json(updated);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
    res.status(400).json({ error: error.message });
  }
};

exports.remove = async (req, res) => {
  await accountService.remove(req.user.id, req.params.id);
  res.status(204).send();
};

exports.checkStatus = async (req, res) => {
  const { id } = req.params;

  console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${id}`);

  const account = await accountService.getOne(req.user.id, id);
  if (!account) {
    console.log(`‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${id}`);
    return res.status(404).json({ error: '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }

  if (!account.cookies || !Array.isArray(account.cookies) || account.cookies.length === 0) {
    console.log(`‚ö†Ô∏è –£ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—É–∫–∏: ${id}`);
    return res.status(400).json({ error: '–£ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—É–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏' });
  }

  const isValid = await checkFacebookCookies(account.cookies);
  const status = isValid ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω';

  console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω: ${status}`);

  const updated = await accountService.update(req.user.id, id, { status });

  if (!updated) {
    console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç: ${id}`);
    return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å' });
  }

  res.json({ success: true, status });
};

exports.checkProxy = async (req, res) => {
  console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–∫—Å–∏:', req.body);
  
  const { proxy, type = 'http' } = req.body;

  if (!proxy) {
    console.log('–û—à–∏–±–∫–∞: –ø—Ä–æ–∫—Å–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ');
    return res.status(400).json({ error: '–ü—Ä–æ–∫—Å–∏ –Ω–µ —É–∫–∞–∑–∞–Ω' });
  }

  if (!['http', 'https', 'socks5'].includes(type)) {
    console.log('–û—à–∏–±–∫–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø—Ä–æ–∫—Å–∏:', type);
    return res.status(400).json({ error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø—Ä–æ–∫—Å–∏' });
  }

  console.log(`–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É ${type} –ø—Ä–æ–∫—Å–∏:`, proxy);
  const proxyService = require('../services/proxyService');
  
  try {
    const result = await proxyService.checkProxy(proxy, type);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏:', result);

    if (result.success) {
      res.json({ 
        success: true, 
        ip: result.ip,
        type: result.type,
        protocol: result.protocol
      });
    } else {
      res.status(400).json({ 
        error: result.error, 
        details: result.details,
        type: result.type
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–∫—Å–∏:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–∫—Å–∏',
      details: error.message
    });
  }
};

exports.syncWithDolphin = async (req, res) => {
  try {
    const { id } = req.params;
    const account = await accountService.getOne(req.user.id, id);
    
    if (!account) {
      return res.status(404).json({ error: '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    if (!env.DOLPHIN_ENABLED || !env.DOLPHIN_API_TOKEN) {
      return res.status(400).json({ error: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Dolphin Anty –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å
    if (account.dolphin && account.dolphin.profileId) {
      return res.status(400).json({ 
        error: '–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω', 
        message: `–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω —Å –ø—Ä–æ—Ñ–∏–ª–µ–º Dolphin Anty (ID: ${account.dolphin.profileId})` 
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ Dolphin Anty
    const dolphinProfile = await dolphinService.createProfile(account);
    
    // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ
    account.dolphin = {
      profileId: dolphinProfile.id,
      syncedAt: new Date()
    };
    
    await account.save();
    
    let cookiesImported = false;
    let cookieError = null;
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã cookies, –ø—Ä–æ–±—É–µ–º –∏—Ö –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
    if (account.cookies && (Array.isArray(account.cookies) || typeof account.cookies === 'string')) {
      try {
        await dolphinService.importCookies(account.cookies, dolphinProfile.id);
        cookiesImported = true;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ cookies:', error);
        cookieError = error.message;
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ cookies
      }
    }
    
    // –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    res.json({
      success: true,
      message: `–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Dolphin Anty (–ø—Ä–æ—Ñ–∏–ª—å #${dolphinProfile.id})`,
      dolphinProfileId: dolphinProfile.id,
      cookiesImported: cookiesImported,
      cookieError: cookieError
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Dolphin Anty:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Dolphin Anty',
      details: error.message
    });
  }
};
